generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role          RoleEnum[]      @default([TUTOR])
  notifications Notifications[]
  tutor         Tutor?
  preceptor     Preceptor?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Tutor {
  id       String           @id @default(cuid())
  name     String
  lastName String
  email    String
  user     User             @relation(fields: [userId], references: [id])
  userId   String           @unique
  students TutorOnStudent[]
}

model Student {
  id         String           @id @default(cuid())
  name       String
  lastName   String
  tutors     TutorOnStudent[]
  attendance Attendance[]
  grade      Grade            @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId    String
}

model TutorOnStudent {
  tutor     Tutor   @relation(fields: [tutorId], references: [id])
  tutorId   String
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  @@id([tutorId, studentId])
}

model Preceptor {
  id       String  @id @default(cuid())
  name     String
  lastName String
  email    String
  user     User?    @relation(fields: [userId], references: [id])
  userId   String?  @unique
  grades   Grade[]
}

model Grade {
  id          String       @id @default(cuid())
  grade       GradeEnum
  division    DivisionEnum
  shift       ShiftEnum
  students    Student[]
  preceptor   Preceptor?   @relation(fields: [preceptorId], references: [id])
  preceptorId String?
}

model Attendance {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  status    StatusEnum
  student   Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  // @@unique([createdAt, studentId])
}

model Notifications {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum DivisionEnum {
  A
  B
  C
  D
}

enum GradeEnum {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
}

enum ShiftEnum {
  MORNING
  AFTERNOON
}

enum StatusEnum {
  ABSENT
  LATE
}

enum RoleEnum {
  ADMIN
  PRECEPTOR
  TUTOR
}
