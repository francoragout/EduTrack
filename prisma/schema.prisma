generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum RoleEnum {
  ADMIN
  PRECEPTOR
  TUTOR
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          RoleEnum[]      @default([TUTOR])
  accounts      Account[]
  grades        Grade[]
  students      UserStudent[]
  notifications Notifications[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model UserStudent {
  userId    String
  studentId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([userId, studentId])
}

enum DivisionEnum {
  A
  B
  C
  D
}

enum GradeEnum {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
}

enum ShiftEnum {
  MORNING
  AFTERNOON
}

model Grade {
  id             String       @id @default(cuid())
  grade          GradeEnum
  division       DivisionEnum
  shift          ShiftEnum
  students       Student[]
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  preceptorEmail String?
}

model Student {
  id          String        @id @default(cuid())
  name        String
  lastName    String
  attendance  Attendance[]
  grade       Grade         @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId     String
  users       UserStudent[]
  tutorEmail1 String?
  tutorEmail2 String?
}

enum StatusEnum {
  ABSENT
  LATE
}

model Attendance {
  id        String     @id @default(cuid())
  createAt  DateTime   @default(now())
  status    StatusEnum
  student   Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
}

model Notifications {
  id       String   @id @default(cuid())
  message  String
  createAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
}
