generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  firstName     String?
  lastName      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role          Role            @default(USER)
  notifications Notifications[]
  classrooms    Classroom[]
  students      UserOnStudent[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Student {
  id          String          @id @default(cuid())
  firstName        String
  lastName    String
  attendance  Attendance[]
  classroom   Classroom       @relation(fields: [classroomId], references: [id])
  classroomId String
  users       UserOnStudent[]
}

model UserOnStudent {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  @@id([userId, studentId])
}

model Classroom {
  id       String    @id @default(cuid())
  grade    Grade
  division Division
  shift    Shift
  students Student[]
  user    User?      @relation(fields: [userId], references: [id])
  userId   String?

  @@unique([grade, division, shift])
}

model Attendance {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  status    Status
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  @@unique([createdAt, studentId])
}

model Notifications {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum Grade {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
}

enum Division {
  A
  B
  C
  D
}

enum Shift {
  MORNING
  AFTERNOON
}

enum Status {
  ABSENT
  LATE
}

enum Role {
  ADMIN
  EDITOR
  USER
}
